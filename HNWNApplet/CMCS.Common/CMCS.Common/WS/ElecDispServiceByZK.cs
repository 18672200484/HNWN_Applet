//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.0.30319.1。
// 
namespace CMCS.Common.WS
{
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;

    /// <summary>
    /// 中矿调运接口类
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "BasicHttpBinding_ElecDispService", Namespace = "ElecDispService")]
    public partial class CommService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {
        private System.Threading.SendOrPostCallback GetRunningElecDispOperationCompleted;

        private System.Threading.SendOrPostCallback GetRunningElecDispatchInfoOperationCompleted;

        private System.Threading.SendOrPostCallback SetVerifyResultOperationCompleted;

        private System.Threading.SendOrPostCallback GetDeductWeightInfoOperationCompleted;

        private System.Threading.SendOrPostCallback SetRcvWeightOperationCompleted;

        private System.Threading.SendOrPostCallback GetDispatchStatusOperationCompleted;

        private System.Threading.SendOrPostCallback SetElecDispatchInfoOperationCompleted;

        private System.Threading.SendOrPostCallback SetDispatchStatusOperationCompleted;

        private System.Threading.SendOrPostCallback GetHistoryElecDispatchInfoOperationCompleted;

        private System.Threading.SendOrPostCallback TestOperationCompleted;

        /// <remarks/>
        public CommService(string url)
        {
            if (string.IsNullOrWhiteSpace(url)) return;

            this.Url = url;
        }

        /// <remarks/>
        public event GetRunningElecDispCompletedEventHandler GetRunningElecDispCompleted;

        /// <remarks/>
        public event GetRunningElecDispatchInfoCompletedEventHandler GetRunningElecDispatchInfoCompleted;

        /// <remarks/>
        public event SetVerifyResultCompletedEventHandler SetVerifyResultCompleted;

        /// <remarks/>
        public event GetDeductWeightInfoCompletedEventHandler GetDeductWeightInfoCompleted;

        /// <remarks/>
        public event SetRcvWeightCompletedEventHandler SetRcvWeightCompleted;

        /// <remarks/>
        public event GetDispatchStatusCompletedEventHandler GetDispatchStatusCompleted;

        /// <remarks/>
        public event SetElecDispatchInfoCompletedEventHandler SetElecDispatchInfoCompleted;

        /// <remarks/>
        public event SetDispatchStatusCompletedEventHandler SetDispatchStatusCompleted;

        /// <remarks/>
        public event GetHistoryElecDispatchInfoCompletedEventHandler GetHistoryElecDispatchInfoCompleted;

        /// <remarks/>
        public event TestCompletedEventHandler TestCompleted;

        /// <summary>
        /// 获取车辆任务数据
        /// </summary>
        /// <param name="plateNo">车牌号码</param>
        /// <param name="poundIndex">磅编号</param>
        /// <returns></returns>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ElecDispService/ElecDispService/GetRunningElecDisp", RequestNamespace = "ElecDispService", ResponseNamespace = "ElecDispService", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public ZkBizResult GetRunningElecDisp([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string plateNo, int poundIndex)
        {
            object[] results = this.Invoke("GetRunningElecDisp", new object[] {
                        plateNo,
                        poundIndex});
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetRunningElecDisp(string plateNo, int poundIndex, bool poundIndexSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetRunningElecDisp", new object[] {
                        plateNo,
                        poundIndex,
                        poundIndexSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public ZkBizResult EndGetRunningElecDisp(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public void GetRunningElecDispAsync(string plateNo, int poundIndex, bool poundIndexSpecified)
        {
            this.GetRunningElecDispAsync(plateNo, poundIndex, poundIndexSpecified, null);
        }

        /// <remarks/>
        public void GetRunningElecDispAsync(string plateNo, int poundIndex, bool poundIndexSpecified, object userState)
        {
            if ((this.GetRunningElecDispOperationCompleted == null))
            {
                this.GetRunningElecDispOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRunningElecDispOperationCompleted);
            }
            this.InvokeAsync("GetRunningElecDisp", new object[] {
                        plateNo,
                        poundIndex,
                        poundIndexSpecified}, this.GetRunningElecDispOperationCompleted, userState);
        }

        private void OnGetRunningElecDispOperationCompleted(object arg)
        {
            if ((this.GetRunningElecDispCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRunningElecDispCompleted(this, new GetRunningElecDispCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ElecDispService/ElecDispService/GetRunningElecDispatchInfo", RequestNamespace = "ElecDispService", ResponseNamespace = "ElecDispService", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public ZkBizResult GetRunningElecDispatchInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string plateNo, int poundIndex, [System.Xml.Serialization.XmlIgnoreAttribute()] bool poundIndexSpecified)
        {
            object[] results = this.Invoke("GetRunningElecDispatchInfo", new object[] {
                        plateNo,
                        poundIndex,
                        poundIndexSpecified});
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetRunningElecDispatchInfo(string plateNo, int poundIndex, bool poundIndexSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetRunningElecDispatchInfo", new object[] {
                        plateNo,
                        poundIndex,
                        poundIndexSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public ZkBizResult EndGetRunningElecDispatchInfo(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public void GetRunningElecDispatchInfoAsync(string plateNo, int poundIndex, bool poundIndexSpecified)
        {
            this.GetRunningElecDispatchInfoAsync(plateNo, poundIndex, poundIndexSpecified, null);
        }

        /// <remarks/>
        public void GetRunningElecDispatchInfoAsync(string plateNo, int poundIndex, bool poundIndexSpecified, object userState)
        {
            if ((this.GetRunningElecDispatchInfoOperationCompleted == null))
            {
                this.GetRunningElecDispatchInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRunningElecDispatchInfoOperationCompleted);
            }
            this.InvokeAsync("GetRunningElecDispatchInfo", new object[] {
                        plateNo,
                        poundIndex,
                        poundIndexSpecified}, this.GetRunningElecDispatchInfoOperationCompleted, userState);
        }

        private void OnGetRunningElecDispatchInfoOperationCompleted(object arg)
        {
            if ((this.GetRunningElecDispatchInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRunningElecDispatchInfoCompleted(this, new GetRunningElecDispatchInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// 反馈验票结果
        /// </summary>
        /// <param name="plateNo">车牌号码</param>
        /// <param name="isAcceptOrNot">是否接受</param>
        /// <param name="msg">描述信息，主要用于验票失败的原因返回值</param>
        /// <param name="taskData">收货单位名称</param>
        /// <param name="poundIndex">磅号</param>
        /// <returns></returns>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ElecDispService/ElecDispService/SetVerifyResult", RequestNamespace = "ElecDispService", ResponseNamespace = "ElecDispService", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public ZkBizResult SetVerifyResult([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string plateNo, bool isAcceptOrNot, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string msg, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string taskData, int poundIndex)
        {
            object[] results = this.Invoke("SetVerifyResult", new object[] {
                        plateNo,
                        isAcceptOrNot,
                        msg,
                        taskData,
                        poundIndex});
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetVerifyResult(string plateNo, bool isAcceptOrNot, bool isAcceptOrNotSpecified, string msg, string taskData, int poundIndex, bool poundIndexSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetVerifyResult", new object[] {
                        plateNo,
                        isAcceptOrNot,
                        isAcceptOrNotSpecified,
                        msg,
                        taskData,
                        poundIndex,
                        poundIndexSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public ZkBizResult EndSetVerifyResult(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public void SetVerifyResultAsync(string plateNo, bool isAcceptOrNot, bool isAcceptOrNotSpecified, string msg, string taskData, int poundIndex, bool poundIndexSpecified)
        {
            this.SetVerifyResultAsync(plateNo, isAcceptOrNot, isAcceptOrNotSpecified, msg, taskData, poundIndex, poundIndexSpecified, null);
        }

        /// <remarks/>
        public void SetVerifyResultAsync(string plateNo, bool isAcceptOrNot, bool isAcceptOrNotSpecified, string msg, string taskData, int poundIndex, bool poundIndexSpecified, object userState)
        {
            if ((this.SetVerifyResultOperationCompleted == null))
            {
                this.SetVerifyResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetVerifyResultOperationCompleted);
            }
            this.InvokeAsync("SetVerifyResult", new object[] {
                        plateNo,
                        isAcceptOrNot,
                        isAcceptOrNotSpecified,
                        msg,
                        taskData,
                        poundIndex,
                        poundIndexSpecified}, this.SetVerifyResultOperationCompleted, userState);
        }

        private void OnSetVerifyResultOperationCompleted(object arg)
        {
            if ((this.SetVerifyResultCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetVerifyResultCompleted(this, new SetVerifyResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// 获取车辆扣吨信息
        /// </summary>
        /// <param name="plateNo">车牌号码</param>
        /// <param name="poundIndex">磅编号</param>
        /// <returns></returns>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ElecDispService/ElecDispService/GetDeductWeightInfo", RequestNamespace = "ElecDispService", ResponseNamespace = "ElecDispService", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public ZkBizResult GetDeductWeightInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string plateNo, int poundIndex)
        {
            object[] results = this.Invoke("GetDeductWeightInfo", new object[] {
                        plateNo,
                        poundIndex});
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetDeductWeightInfo(string plateNo, int poundIndex, bool poundIndexSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetDeductWeightInfo", new object[] {
                        plateNo,
                        poundIndex,
                        poundIndexSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public ZkBizResult EndGetDeductWeightInfo(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public void GetDeductWeightInfoAsync(string plateNo, int poundIndex, bool poundIndexSpecified)
        {
            this.GetDeductWeightInfoAsync(plateNo, poundIndex, poundIndexSpecified, null);
        }

        /// <remarks/>
        public void GetDeductWeightInfoAsync(string plateNo, int poundIndex, bool poundIndexSpecified, object userState)
        {
            if ((this.GetDeductWeightInfoOperationCompleted == null))
            {
                this.GetDeductWeightInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeductWeightInfoOperationCompleted);
            }
            this.InvokeAsync("GetDeductWeightInfo", new object[] {
                        plateNo,
                        poundIndex,
                        poundIndexSpecified}, this.GetDeductWeightInfoOperationCompleted, userState);
        }

        private void OnGetDeductWeightInfoOperationCompleted(object arg)
        {
            if ((this.GetDeductWeightInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeductWeightInfoCompleted(this, new GetDeductWeightInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <summary>
        /// 反馈车辆厂收信息
        /// </summary>
        /// <param name="plateNo">车牌号码</param>
        /// <param name="grossWeight">收货毛重</param>
        /// <param name="tareWeight">收货皮重</param>
        /// <param name="deductWeight">扣吨重量</param>
        /// <param name="deductReason">扣吨原因</param>
        /// <param name="finalWeight">平吨重量(暂无用，传0)</param>
        /// <param name="poundIndex">磅号</param>
        /// <returns></returns>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ElecDispService/ElecDispService/SetRcvWeight", RequestNamespace = "ElecDispService", ResponseNamespace = "ElecDispService", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public ZkBizResult SetRcvWeight([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string plateNo, double grossWeight, double tareWeight, double deductWeight, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string deductReason, double finalWeight, int poundIndex)
        {
            object[] results = this.Invoke("SetRcvWeight", new object[] {
                        plateNo,
                        grossWeight,
                        tareWeight,
                        deductWeight,
                        deductReason,
                        finalWeight,
                        poundIndex});
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetRcvWeight(string plateNo, double grossWeight, bool grossWeightSpecified, double tareWeight, bool tareWeightSpecified, double deductWeight, bool deductWeightSpecified, string deductReason, double finalWeight, bool finalWeightSpecified, int poundIndex, bool poundIndexSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetRcvWeight", new object[] {
                        plateNo,
                        grossWeight,
                        grossWeightSpecified,
                        tareWeight,
                        tareWeightSpecified,
                        deductWeight,
                        deductWeightSpecified,
                        deductReason,
                        finalWeight,
                        finalWeightSpecified,
                        poundIndex,
                        poundIndexSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public ZkBizResult EndSetRcvWeight(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public void SetRcvWeightAsync(string plateNo, double grossWeight, bool grossWeightSpecified, double tareWeight, bool tareWeightSpecified, double deductWeight, bool deductWeightSpecified, string deductReason, double finalWeight, bool finalWeightSpecified, int poundIndex, bool poundIndexSpecified)
        {
            this.SetRcvWeightAsync(plateNo, grossWeight, grossWeightSpecified, tareWeight, tareWeightSpecified, deductWeight, deductWeightSpecified, deductReason, finalWeight, finalWeightSpecified, poundIndex, poundIndexSpecified, null);
        }

        /// <remarks/>
        public void SetRcvWeightAsync(string plateNo, double grossWeight, bool grossWeightSpecified, double tareWeight, bool tareWeightSpecified, double deductWeight, bool deductWeightSpecified, string deductReason, double finalWeight, bool finalWeightSpecified, int poundIndex, bool poundIndexSpecified, object userState)
        {
            if ((this.SetRcvWeightOperationCompleted == null))
            {
                this.SetRcvWeightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRcvWeightOperationCompleted);
            }
            this.InvokeAsync("SetRcvWeight", new object[] {
                        plateNo,
                        grossWeight,
                        grossWeightSpecified,
                        tareWeight,
                        tareWeightSpecified,
                        deductWeight,
                        deductWeightSpecified,
                        deductReason,
                        finalWeight,
                        finalWeightSpecified,
                        poundIndex,
                        poundIndexSpecified}, this.SetRcvWeightOperationCompleted, userState);
        }

        private void OnSetRcvWeightOperationCompleted(object arg)
        {
            if ((this.SetRcvWeightCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRcvWeightCompleted(this, new SetRcvWeightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ElecDispService/ElecDispService/GetDispatchStatus", RequestNamespace = "ElecDispService", ResponseNamespace = "ElecDispService", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDispatchStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string plateNo, int poundIndex, [System.Xml.Serialization.XmlIgnoreAttribute()] bool poundIndexSpecified, out byte GetDispatchStatusResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetDispatchStatusResultSpecified)
        {
            object[] results = this.Invoke("GetDispatchStatus", new object[] {
                        plateNo,
                        poundIndex,
                        poundIndexSpecified});
            GetDispatchStatusResult = ((byte)(results[0]));
            GetDispatchStatusResultSpecified = ((bool)(results[1]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetDispatchStatus(string plateNo, int poundIndex, bool poundIndexSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetDispatchStatus", new object[] {
                        plateNo,
                        poundIndex,
                        poundIndexSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public void EndGetDispatchStatus(System.IAsyncResult asyncResult, out byte GetDispatchStatusResult, out bool GetDispatchStatusResultSpecified)
        {
            object[] results = this.EndInvoke(asyncResult);
            GetDispatchStatusResult = ((byte)(results[0]));
            GetDispatchStatusResultSpecified = ((bool)(results[1]));
        }

        /// <remarks/>
        public void GetDispatchStatusAsync(string plateNo, int poundIndex, bool poundIndexSpecified)
        {
            this.GetDispatchStatusAsync(plateNo, poundIndex, poundIndexSpecified, null);
        }

        /// <remarks/>
        public void GetDispatchStatusAsync(string plateNo, int poundIndex, bool poundIndexSpecified, object userState)
        {
            if ((this.GetDispatchStatusOperationCompleted == null))
            {
                this.GetDispatchStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDispatchStatusOperationCompleted);
            }
            this.InvokeAsync("GetDispatchStatus", new object[] {
                        plateNo,
                        poundIndex,
                        poundIndexSpecified}, this.GetDispatchStatusOperationCompleted, userState);
        }

        private void OnGetDispatchStatusOperationCompleted(object arg)
        {
            if ((this.GetDispatchStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDispatchStatusCompleted(this, new GetDispatchStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ElecDispService/ElecDispService/SetElecDispatchInfo", RequestNamespace = "ElecDispService", ResponseNamespace = "ElecDispService", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public ZkBizResult SetElecDispatchInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string plateNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] DispatchInfo disp, int poundIndex, [System.Xml.Serialization.XmlIgnoreAttribute()] bool poundIndexSpecified)
        {
            object[] results = this.Invoke("SetElecDispatchInfo", new object[] {
                        plateNo,
                        disp,
                        poundIndex,
                        poundIndexSpecified});
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetElecDispatchInfo(string plateNo, DispatchInfo disp, int poundIndex, bool poundIndexSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetElecDispatchInfo", new object[] {
                        plateNo,
                        disp,
                        poundIndex,
                        poundIndexSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public ZkBizResult EndSetElecDispatchInfo(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public void SetElecDispatchInfoAsync(string plateNo, DispatchInfo disp, int poundIndex, bool poundIndexSpecified)
        {
            this.SetElecDispatchInfoAsync(plateNo, disp, poundIndex, poundIndexSpecified, null);
        }

        /// <remarks/>
        public void SetElecDispatchInfoAsync(string plateNo, DispatchInfo disp, int poundIndex, bool poundIndexSpecified, object userState)
        {
            if ((this.SetElecDispatchInfoOperationCompleted == null))
            {
                this.SetElecDispatchInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetElecDispatchInfoOperationCompleted);
            }
            this.InvokeAsync("SetElecDispatchInfo", new object[] {
                        plateNo,
                        disp,
                        poundIndex,
                        poundIndexSpecified}, this.SetElecDispatchInfoOperationCompleted, userState);
        }

        private void OnSetElecDispatchInfoOperationCompleted(object arg)
        {
            if ((this.SetElecDispatchInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetElecDispatchInfoCompleted(this, new SetElecDispatchInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ElecDispService/ElecDispService/SetDispatchStatus", RequestNamespace = "ElecDispService", ResponseNamespace = "ElecDispService", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDispatchStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string plateNo, byte status, [System.Xml.Serialization.XmlIgnoreAttribute()] bool statusSpecified, int poundIndex, [System.Xml.Serialization.XmlIgnoreAttribute()] bool poundIndexSpecified, out bool SetDispatchStatusResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SetDispatchStatusResultSpecified)
        {
            object[] results = this.Invoke("SetDispatchStatus", new object[] {
                        plateNo,
                        status,
                        statusSpecified,
                        poundIndex,
                        poundIndexSpecified});
            SetDispatchStatusResult = ((bool)(results[0]));
            SetDispatchStatusResultSpecified = ((bool)(results[1]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetDispatchStatus(string plateNo, byte status, bool statusSpecified, int poundIndex, bool poundIndexSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetDispatchStatus", new object[] {
                        plateNo,
                        status,
                        statusSpecified,
                        poundIndex,
                        poundIndexSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetDispatchStatus(System.IAsyncResult asyncResult, out bool SetDispatchStatusResult, out bool SetDispatchStatusResultSpecified)
        {
            object[] results = this.EndInvoke(asyncResult);
            SetDispatchStatusResult = ((bool)(results[0]));
            SetDispatchStatusResultSpecified = ((bool)(results[1]));
        }

        /// <remarks/>
        public void SetDispatchStatusAsync(string plateNo, byte status, bool statusSpecified, int poundIndex, bool poundIndexSpecified)
        {
            this.SetDispatchStatusAsync(plateNo, status, statusSpecified, poundIndex, poundIndexSpecified, null);
        }

        /// <remarks/>
        public void SetDispatchStatusAsync(string plateNo, byte status, bool statusSpecified, int poundIndex, bool poundIndexSpecified, object userState)
        {
            if ((this.SetDispatchStatusOperationCompleted == null))
            {
                this.SetDispatchStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDispatchStatusOperationCompleted);
            }
            this.InvokeAsync("SetDispatchStatus", new object[] {
                        plateNo,
                        status,
                        statusSpecified,
                        poundIndex,
                        poundIndexSpecified}, this.SetDispatchStatusOperationCompleted, userState);
        }

        private void OnSetDispatchStatusOperationCompleted(object arg)
        {
            if ((this.SetDispatchStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDispatchStatusCompleted(this, new SetDispatchStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ElecDispService/ElecDispService/GetHistoryElecDispatchInfo", RequestNamespace = "ElecDispService", ResponseNamespace = "ElecDispService", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public ZkBizResult GetHistoryElecDispatchInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string plateNo, int poundIndex, [System.Xml.Serialization.XmlIgnoreAttribute()] bool poundIndexSpecified)
        {
            object[] results = this.Invoke("GetHistoryElecDispatchInfo", new object[] {
                        plateNo,
                        poundIndex,
                        poundIndexSpecified});
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHistoryElecDispatchInfo(string plateNo, int poundIndex, bool poundIndexSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHistoryElecDispatchInfo", new object[] {
                        plateNo,
                        poundIndex,
                        poundIndexSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public ZkBizResult EndGetHistoryElecDispatchInfo(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ZkBizResult)(results[0]));
        }

        /// <remarks/>
        public void GetHistoryElecDispatchInfoAsync(string plateNo, int poundIndex, bool poundIndexSpecified)
        {
            this.GetHistoryElecDispatchInfoAsync(plateNo, poundIndex, poundIndexSpecified, null);
        }

        /// <remarks/>
        public void GetHistoryElecDispatchInfoAsync(string plateNo, int poundIndex, bool poundIndexSpecified, object userState)
        {
            if ((this.GetHistoryElecDispatchInfoOperationCompleted == null))
            {
                this.GetHistoryElecDispatchInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoryElecDispatchInfoOperationCompleted);
            }
            this.InvokeAsync("GetHistoryElecDispatchInfo", new object[] {
                        plateNo,
                        poundIndex,
                        poundIndexSpecified}, this.GetHistoryElecDispatchInfoOperationCompleted, userState);
        }

        private void OnGetHistoryElecDispatchInfoOperationCompleted(object arg)
        {
            if ((this.GetHistoryElecDispatchInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoryElecDispatchInfoCompleted(this, new GetHistoryElecDispatchInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ElecDispService/ElecDispService/Test", RequestNamespace = "ElecDispService", ResponseNamespace = "ElecDispService", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Test([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string msg)
        {
            object[] results = this.Invoke("Test", new object[] {
                        msg});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTest(string msg, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Test", new object[] {
                        msg}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTest(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TestAsync(string msg)
        {
            this.TestAsync(msg, null);
        }

        /// <remarks/>
        public void TestAsync(string msg, object userState)
        {
            if ((this.TestOperationCompleted == null))
            {
                this.TestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestOperationCompleted);
            }
            this.InvokeAsync("Test", new object[] {
                        msg}, this.TestOperationCompleted, userState);
        }

        private void OnTestOperationCompleted(object arg)
        {
            if ((this.TestCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestCompleted(this, new TestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AntennaCommService")]
    public partial class ZkBizResult
    {
        private DispatchInfo dispatchInfoField;

        private string messageField;

        private bool statusField;

        private bool statusFieldSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public DispatchInfo DispatchInfo
        {
            get
            {
                return this.dispatchInfoField;
            }
            set
            {
                this.dispatchInfoField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }

        /// <remarks/>
        public bool Status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }

        ///// <remarks/>
        //[System.Xml.Serialization.XmlIgnoreAttribute()]
        //public bool StatusSpecified
        //{
        //    get
        //    {
        //        return this.statusFieldSpecified;
        //    }
        //    set
        //    {
        //        this.statusFieldSpecified = value;
        //    }
        //}
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AntennaCommService")]
    public partial class DispatchInfo
    {
        private string carrierField;

        private string catagoryField;

        private string consigneeField;

        private string dispatchNoField;

        private byte dispatchStatusField;

        private string driverField;

        private double finalGrossWeightField;

        private double finalTareField;

        private string goodsField;

        private string lastChangedUserField;

        private string plateNoField;

        private string receiveDeductReasonField;

        private double receiveDeductWeightField;

        private double sendGrossWeightField;

        private double sendTareField;

        private double sendWeightField;

        private string shipperField;

        private string taskNoField;

        /// <summary>
        /// 运输单位
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Carrier
        {
            get
            {
                return this.carrierField;
            }
            set
            {
                this.carrierField = value;
            }
        }

        /// <summary>
        /// 00 00 00 00 1 （设备异常、超速报警、违规区域报警、线路偏移报警、卸煤点）
        /// [卸煤点信息 1:南煤场东段 2:南煤场西段 3:北煤场东段 4:北煤场西段 5:卸煤沟]
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Catagory
        {
            get
            {
                return this.catagoryField;
            }
            set
            {
                this.catagoryField = value;
            }
        }

        /// <summary>
        /// 收货单位
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Consignee
        {
            get
            {
                return this.consigneeField;
            }
            set
            {
                this.consigneeField = value;
            }
        }

        /// <summary>
        /// 运单编号
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string DispatchNo
        {
            get
            {
                return this.dispatchNoField;
            }
            set
            {
                this.dispatchNoField = value;
            }
        }

        /// <summary>
        /// 任务状态
        /// </summary>
        public byte DispatchStatus
        {
            get
            {
                return this.dispatchStatusField;
            }
            set
            {
                this.dispatchStatusField = value;
            }
        }

        /// <summary>
        /// 司机
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Driver
        {
            get
            {
                return this.driverField;
            }
            set
            {
                this.driverField = value;
            }
        }

        /// <summary>
        /// 收货毛重
        /// </summary>
        public double FinalGrossWeight
        {
            get
            {
                return this.finalGrossWeightField;
            }
            set
            {
                this.finalGrossWeightField = value;
            }
        }

        /// <summary>
        /// 收货皮重
        /// </summary>
        public double FinalTare
        {
            get
            {
                return this.finalTareField;
            }
            set
            {
                this.finalTareField = value;
            }
        }

        /// <summary>
        /// 货物
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Goods
        {
            get
            {
                return this.goodsField;
            }
            set
            {
                this.goodsField = value;
            }
        }

        /// <summary>
        /// 最后修改人
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string LastChangedUser
        {
            get
            {
                return this.lastChangedUserField;
            }
            set
            {
                this.lastChangedUserField = value;
            }
        }

        /// <summary>
        /// 车牌号码
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string PlateNo
        {
            get
            {
                return this.plateNoField;
            }
            set
            {
                this.plateNoField = value;
            }
        }

        /// <summary>
        /// 扣吨原因
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string ReceiveDeductReason
        {
            get
            {
                return this.receiveDeductReasonField;
            }
            set
            {
                this.receiveDeductReasonField = value;
            }
        }

        /// <summary>
        /// 扣吨量
        /// </summary>
        public double ReceiveDeductWeight
        {
            get
            {
                return this.receiveDeductWeightField;
            }
            set
            {
                this.receiveDeductWeightField = value;
            }
        }

        /// <summary>
        /// 起始毛重
        /// </summary>
        public double SendGrossWeight
        {
            get
            {
                return this.sendGrossWeightField;
            }
            set
            {
                this.sendGrossWeightField = value;
            }
        }

        /// <summary>
        /// 起始皮重
        /// </summary>
        public double SendTare
        {
            get
            {
                return this.sendTareField;
            }
            set
            {
                this.sendTareField = value;
            }
        }

        /// <summary>
        /// 发货净重
        /// </summary>
        public double SendWeight
        {
            get
            {
                return this.sendWeightField;
            }
            set
            {
                this.sendWeightField = value;
            }
        }

        /// <summary>
        /// 发货单位
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Shipper
        {
            get
            {
                return this.shipperField;
            }
            set
            {
                this.shipperField = value;
            }
        }

        /// <summary>
        /// 计划卡号：供应商、运输商、煤种的组合编号
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string TaskNo
        {
            get
            {
                return this.taskNoField;
            }
            set
            {
                this.taskNoField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetRunningElecDispCompletedEventHandler(object sender, GetRunningElecDispCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRunningElecDispCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRunningElecDispCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ZkBizResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ZkBizResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetRunningElecDispatchInfoCompletedEventHandler(object sender, GetRunningElecDispatchInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRunningElecDispatchInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRunningElecDispatchInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ZkBizResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ZkBizResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SetVerifyResultCompletedEventHandler(object sender, SetVerifyResultCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetVerifyResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetVerifyResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ZkBizResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ZkBizResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetDeductWeightInfoCompletedEventHandler(object sender, GetDeductWeightInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeductWeightInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetDeductWeightInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ZkBizResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ZkBizResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SetRcvWeightCompletedEventHandler(object sender, SetRcvWeightCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRcvWeightCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetRcvWeightCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ZkBizResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ZkBizResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetDispatchStatusCompletedEventHandler(object sender, GetDispatchStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDispatchStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetDispatchStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte GetDispatchStatusResult
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool GetDispatchStatusResultSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SetElecDispatchInfoCompletedEventHandler(object sender, SetElecDispatchInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetElecDispatchInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetElecDispatchInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ZkBizResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ZkBizResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SetDispatchStatusCompletedEventHandler(object sender, SetDispatchStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDispatchStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetDispatchStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool SetDispatchStatusResult
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }

        /// <remarks/>
        public bool SetDispatchStatusResultSpecified
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetHistoryElecDispatchInfoCompletedEventHandler(object sender, GetHistoryElecDispatchInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoryElecDispatchInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHistoryElecDispatchInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ZkBizResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ZkBizResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void TestCompletedEventHandler(object sender, TestCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
